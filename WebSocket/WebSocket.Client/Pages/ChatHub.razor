@page "/chathub"
@rendermode InteractiveWebAssembly
@inject NavigationManager NavigationManager
@inject IJSRuntime JS;
@implements IAsyncDisposable

<PageTitle>SignalR Chat </PageTitle>
<h3>SignalR Chat</h3>

@if (!IsConnected) @* Checks if the user is connected to the SignalR hub. *@
{
    <div class="input-group">
        <input @bind="username" class="form-control" placeholder="What is your name?" />
        <button class="btn btn-primary form-control-append" @onclick="Connect">Connect</button>
    </div>
}
else
{
    <textarea style="width: 100%; height: 500px;" @ref="TextAreaRef">@messages</textarea>
    <div class="input-group">
        <input @bind-value="message" @bind-value:event="oninput" @onkeyup="HandleInput" class="form-control" />
        <button class="btn btn-primary form-control-append" @onclick="Send" disabled="@(!IsConnected)">Send</button>
    </div>
}

@code {
    private HubConnection? hubConnection;
    private string messages = string.Empty;
    private string username = string.Empty;
    private string message = string.Empty;
    ElementReference TextAreaRef;

    /// <summary>
    /// Connects to the SignalR hub using the username provided.
    /// </summary>
    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri($"/chathub?username={username}")).Build();
        hubConnection.On<string, string>("ReceivedMessage", (user, message) =>
        {
            var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + ": ")} {message}";
            messages += msg + "\n";
            JS.InvokeVoidAsync("scrollToBottom", TextAreaRef);
            StateHasChanged();
        });
        await hubConnection.StartAsync();
    }

    /// <summary>
    /// Sends the typed message to the SignalR hub.
    /// </summary>
    private async Task Send()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("AddMessageToChat", username, message);
            message = string.Empty;
        }
    }

    /// <summary>
    /// Handles user input in the message field.
    /// Sends the message when the Enter key is pressed.
    /// </summary>
    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key == null || args.Key.Equals("Enter"))
            await Send();
    }

    /// <summary>
    /// Checks if the user is connected to the SignalR hub.
    /// </summary>
    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    /// <summary>
    /// Disposes the SignalR hub connection when the component is destroyed.
    /// </summary>
    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
            await hubConnection.DisposeAsync();
    }
}
